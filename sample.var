<?php

//	varrefvals.php

/*
	
    Varrefvals. Simple code compiler for PHP code written without $ => :: -> ; signs.
    Copyright (C) 2016 - 2019 Wastono
	
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
	
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
	
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
*/

//	Varrefvals version 2.0

class Var2PhpBase
{
	public const Reserved = 'the|dserver|dglobals|dsession|dargv|dargc|dget|dpost|drequest|dcookie|dfiles|denv|dhttpResponseHeader|dline|dfile|ddir|dfunction|dclass|dtrait|dmethod|dnamespace|php|fn|stdclass|true|false|null|int|float|boolean|integer|binary|unset|real|double|bool|string|void|iterable|object|resource|mixed|numeric|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|instanceof|insteadof|interface|isset|list|namespace|new|or|print|private|protected|public|require|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield|from'
	public const SemiReserved = 'constant|sqrt|abs|pack|glob|prev|next|current|min|max|link|dl|chr|log|key|exp|pos|count|file|dir|sin|cos|tan|pi|rand|range|mail|system|defined|header|uniqid|crypt|time|date|hash|microtime|localtime|stat|idate'
	
	private const TextAliasCode = 'X'
	private const ComplexAliasCode = 'A'
	private const CommentAliasCode = 'C'
	private const SeparatorAliasCode = '_'
	
	private counter
	public alias, part, variable, falseVariable
	public commentSelector, aliasSelector, fullSelector, textOnlySelector
	public commentEscape, commentEscape2
	public codeEscape, codeEscape2
	
	private initiated = false
	
	public function initiate ()
	{
		this.counter = 0
		this.alias = []
		this.part = []
		this.variable = []
		this.falseVariable = []
		
		if (!this.initiated)
		{
			this.initiated = true
			
			this.commentSelector = this.getSelectorFormat(self.CommentAliasCode)
			this.aliasSelector = this.getSelectorFormat(self.ComplexAliasCode . self.TextAliasCode)
			this.fullSelector = this.aliasSelector . '|' . this.commentSelector
			
			var wordSelector = '(\w+)'
			this.textOnlySelector = '~(?>\b' . this.isolateText(wordSelector) . '\b)~'
			
			this.commentEscape = '(?:(?>' . this.commentSelector . ')|\s)*'
			this.commentEscape2 = str_replace('\s', '[ \t]', this.commentEscape)
			this.codeEscape = '(?!\b(?i:' . this.fullSelector . '|vals|refs?)\b)'
			this.codeEscape2 = str_replace(')\b)',
			'|\d+|else|if|stdclass|true|false|null|final|abstract|class|interface|trait|function|const|return|goto|global|echo|die|require|require_once|include|include_once|new|clone|throw|use|var|public|private|protected|static|yield|dserver|dglobals|dsession|dargv|dargc|dget|dpost|drequest|dcookie|dfiles|denv|dhttpResponseHeader|dline|dfile|ddir|dfunction|dclass|dtrait|dmethod|dnamespace)\b)',
			this.codeEscape)
		}
	}
	
	//	get selector format
	private function getSelectorFormat (code)
	{
		var format = []
		var length = strlen(code)
		for (i = 0; i < length; i++)
		{
			var c = code[i]
			format[] = this.generateCode(c, (c == self.TextAliasCode) ? '\w+' : '\d+')
		}
		return implode('|', format)
	}
	
	//	generate alias
	private function generateCode (code1, code2)
	{
		return self.SeparatorAliasCode . code1 . self.SeparatorAliasCode . code2 . self.SeparatorAliasCode
	}
	
	//	generate alias
	public function generateAlias (ref part, forComment = false)
	{
		var alias = this.generateCode((forComment ? self.CommentAliasCode : self.ComplexAliasCode), this.counter++)
		array_unshift(this.alias, alias)
		array_unshift(this.part, part)
		return alias
	}
	
	//	isolate text
	public function isolateText (ref text)
	{
		return (text === '') ? '' : this.generateCode(self.TextAliasCode, text)
	}
	
	//	isolate part
	public function isolatePart (ref part)
	{
		if (strpos(part, '\\') !== false) return this.generateAlias(part)
		return this.isolateText(part)
	}
}

class Varrefvals extends Var2PhpBase
{
	private phpBinary
	
	public function __construct ()
	{
		ob_implicit_flush(1)
		this.message("Varrefvals (c) 2016 - 2019 Wastono.\n")
	}
	
	private function message (s) { echo "\n\t", s }
	private function message2 (s, nl = "\n")
	{
		var now = DateTime.createFromFormat('U.u', microtime(true))
		echo nl, "\t", now.format('Y-m-d H:i:s.u'), "   ", s
	}
	
	public function execute (file = '', phpBinary = '')
	{
		try
		{
			this.phpBinary = phpBinary
			
			//	check file
			//	skip varrefvals.php
			if (file == 'varrefvals.php')
			{
				this.message("skip varrefvals.php file.\n\n")
				return
			}
			
			//	execute .php file
			if (preg_match('/.*?\.php$/i', file))
			{
				this.message('Executing ' . file . "...\n\n")
				if (phpBinary) this.processFile(file, false)
				else include file
				return
			}
			
			//	empty argument: find all .var file, recursively
			if (file == '')
			{
				var dir = getcwd()
				foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator(dir)) as path)
				{
					if (preg_match('/.*?\.var$/i', path) && !is_dir(path))
					{
						// create .php file from .var file
						this.var2php(path)
					}
				}
				this.message("That's all in " . dir . "\n")
				return
			}
			
			//	non empty argument: check .var file extension
			if (!preg_match('/.*?\.var$/i', file))
			{
				this.message(file)
				this.message("Please provide .var or .php file only.\n")
				return
			}
			
			//	create a .php file from a .var file
			this.var2php(file)
		}
		catch (Exception e)
		{
			this.message(e.getMessage(), '')
		}
	}
	
	//	convert .var file to php file
	public function var2php (path)
	{
		var filename = basename(path)
		this.message2('start ' . filename)
		
		//	check file
		if (!file_exists(path))
		{
			this.message2("file is not found!\n\t" . path . "\n")
			return
		}
		
		//	package helper
		this.initiate()
		
		//	add special variable
		this.variable[] = 'this'
		
		//	read file content
		var file = file_get_contents(path)
		
		//	1. html
		//	2. heredoc
		//	3. nowdoc
		//	4. single quoted string
		//	5. double quoted string
		//	6. backtick operator
		//	7. comment
		//	8. interface
		//	9. trait
		//	10. class
		this.isolateParts(file)
		
		//	11. catch
		this.processCatchPart(file)
		
		//	12. function
		//	13. fn
		this.processFunctionAndFnPart(file)
		
		//	14. statement terminator
		this.terminateStatement(file)
		
		//	15. namespace
		this.isolateNamespace(file)
		
		//	16. use for namespace
		//	17. use for trait
		this.processUsePart(file)
		
		//	18. digit space (binary, octal, decimal, float, hexadecimal)
		this.removeDigitSpace(file)
		
		//	19. properties declaration
		//	20. variable declaration
		//	21. global variable
		this.processVariableIntro(file)
		
		//	22. list
		this.processListPart(file)
		
		//	23. foreach as
		this.processForeachAsPart(file)
		
		//	24. pairing notation
		this.replacePairingNotation(file)
		
		//	25. assignment
		this.processAssignmentPart(file)
		
		//	26. aliases
		this.replaceAliases(file)
		
		//	27. variable
		this.variablilize(file)
		
		//	28. dot operator
		this.replaceDotOperator(file)
		
		//	29. isolated part
		this.restoreIsolatedPart(file)
		
		//	write .php file
		var name = str_replace('.var', '.php', path)
		file_put_contents(name , file)
		
		this.message2("write " . str_replace('.var', '.php', filename))
		
		//	check code syntax
		this.processFile(name)
	}
	
	//	execute file
	public function processFile (ref path, checkSyntaxOnly = true)
	{
		if (this.phpBinary)
		{
			var command = '"' . this.phpBinary . '"' . (checkSyntaxOnly ? ' -l' : '') . ' -f "' . path . '"'
			if (checkSyntaxOnly)
			{
				this.message2("start checking syntax\n")
				var output = []
				exec(command, output)
				this.message2("finish", '')
				this.message(array_slice(output, -1)[0] . "\n")
			}
			else system(command)
		}
	}
	
	//	restore isolated part
	public function restoreIsolatedPart (ref file)
	{
		if (this.alias) file = str_replace(this.alias, this.part, file)
		file = preg_replace(this.textOnlySelector, '$1', file)
	}
	
	//	terminate statement
	public function terminateStatement (ref file)
	{
		if (!isset(this.dummyTerminator))
		{
			this.dummyTerminator = '_T_3_m_P_'
			
			//	return, yield from, = function () {};
			this.anonimousFunctionAssignmentSelector = str_replace('\s*', this.commentEscape,
			'~(?:\breturn\b|\byield\b\s\s*\bfrom\b|[^-+/*.%&|<>!=?^]=)\s*(?:\bstatic\b)?\s*\bfunction\b\s*&?\s*(\((?:(?>[^()]+)|\)\s*\buse\b\s*\(|(?-1))*\))\s*:?\s*\??\s*\w*\s*(\{(?:(?>[^{}]+)|(?-1))*\})\K(?=\s*[^\s;])~')
			
			this.simpleMustHaveTerminatorSelector =
			[
				//	break, continue, return, yield, exit ;
				str_replace(['\s*', '\t*'], [this.commentEscape, this.commentEscape2],
				'~\b(?:break|continue|return|yield|exit)\b\K(?=\t*[\r\n]|\s*(?:\}|\?>|$))~'),
				
				//	} while () , do while (), endswitch, endfor, endforeach, endwhile, endif ;
				str_replace('\s*', this.commentEscape,
				'~(?:\b(?i:endswitch|endfor|endforeach|endwhile|endif)\b|(?:\}|\bdo\b\s*[\s\S]+?)\s*\bwhile\b\s*(\((?:(?>[^()]+)|(?-1))*\)))\K(?=\s*[^\s;])~'),
			]
			
			//	expression ; \r\n expression
			this.betweenExpressionTerminatorSelector = str_replace(['\s*', '\t*', '\reserved'],
			[this.commentEscape, this.commentEscape2, str_replace(['|null|', '|true|', '|false|', '|stdclass|'], '|', self.Reserved)],
			'~(?'
			. '|(?:->|::|\.)(?|\s*(\{(?:(?>[^{}]+)|(?-1))*\})|\bclass\b())'
			. '|\$?\b(?!(?i:\reserved)\b|' . this.commentSelector . '\b)\w+\b()'
			. '|([\]\'"`)])'
			. '|\+\+()|--()'
			. '|=\s*\{\}()'
			. ')\K'
			. '(?='
			. '(?'
			. '|\s*(\?>|\}|$)'
			. '|\t*[\r\n]\s*()'
			. '(?:'
			. '(\((?:(?>[^()]+)|(?-1))*\))\s*(?:->|::|[\[.(])'
			. '|(\[(?:(?>[^\[\]]+)|(?-1))*\])\s*[=(]'
			. '|\$?\b(?!(?i:as|instanceof|insteadof|and|x?or)\b|' . this.commentSelector . '\b)\w+\b'
			. '|[\'"`$]'
			. '|\+\+|--'
			. ')'
			. '))~'
			)
			
			//	while|if|foreach|for () dummy
			this.unneededDummyOnControlStructureSelector = str_replace('\s*', this.commentEscape,
			'~\b(?i:while|if|foreach|for)\b\s*(\((?:(?>[^()]+)|(?-1))*\))\K' . this.dummyTerminator . '~')
			
			//	->{	dummy }
			this.unneededDummyOnVariableOfVariableSelector = str_replace('\s*', this.commentEscape,
			'~(?:->|::|\.)\s*\{[^{;}]+\K' . this.dummyTerminator . '(?=\s*\})~')
		}
		
		//	put ; on format:		return, yield from, = function () {};
		file = preg_replace(this.anonimousFunctionAssignmentSelector, ';', file)
		
		//	put ; on simple format
		file = preg_replace(this.simpleMustHaveTerminatorSelector, ';', file)
		
		//	put ; on format			//	expression ; \r\n expression
		file = preg_replace_callback(this.betweenExpressionTerminatorSelector,
		function (match)
		{
			//	expression ; \r\n expression
			//	dummy for:			expression ; }			) ; \r\n expression
			return (match[1] == ')' || match[2] == '}') ? this.dummyTerminator : ';'
		}
		, file)
		
		//	remove dummy on unneeded ;		while|if|foreach|for () dummy
		file = preg_replace(this.unneededDummyOnControlStructureSelector, '', file)
		
		//	remove dummy on unneeded ;		->{	dummy }
		file = preg_replace(this.unneededDummyOnVariableOfVariableSelector, '', file)
		
		//	replace dummy on needed ;		) dummy		dummy }
		file = str_replace(this.dummyTerminator, ';', file)
	}
	
	//	replace dot operator
	public function replaceDotOperator (ref file)
	{
		if (!isset(this.dotOperatorSelector))
		{
			this.dotOperatorSelector =
			[
				//	.Constant
				str_replace('\s*', this.commentEscape,
				'~[\w)}]\s*\K\.(?=\b[A-Z])~'),
				
				//	instance.
				str_replace('\s*', this.commentEscape,
				'~(?:\$\b\w+\b|[)}])\K(?:\s*\.(?:\$?\b[_a-zA-Z]\w*\b|\{))+~'),
				
				//	notInstance.
				str_replace('\s*', this.commentEscape,
				'~(?<!\$)\b[_a-zA-Z]\w*\b\s*\.(?|()(\{)|(\$?\b[_a-zA-Z]\w*\b)\s*(\(?))~'),
				//								 1  2  |	1					  2		
			]
		}
		
		file = preg_replace_callback(this.dotOperatorSelector,
		function (match)
		{
			//	.Constant
			if (match[0] == '.') return '::'
			
			//	notInstance.
			if (isset(match[2]))
			{
				if (match[2] === '' && match[1] != 'class') match[1] = '::$'
				else match[1] = '::'
				
				return str_replace('.', match[1], match[0])
			}
			
			//	instance.
			return str_replace('.', '->', match[0])
		}
		, file)
	}
	
	//	variablilize
	public function variablilize (ref file)
	{
		if (!isset(this.reservedSelector))
		{
			this.reservedSelector = '~^(?i:' . self.Reserved . ')$~'
			this.partOfvariableSelector = str_replace('\s*', this.commentEscape,
			'~(?:[\w})]\s*\.|(..))\K(?<!\$|::|->|\\\)(?!\b(?i:' . self.SemiReserved . ')\b(?:\\\|\s*\())(?=\b(?:')
			//				  1																						
		}
		
		this.variable = array_filter(preg_replace_callback(this.reservedSelector,
		function (match)
		{
			this.falseVariable[] = match[0]
			return ''
		}
		, array_unique(this.variable)))
		
		if (this.falseVariable) this.message2("false variable detected:\n\t" . implode(', ', this.falseVariable) . "\n")
		
		file = preg_replace_callback(this.partOfvariableSelector . implode('|', this.variable) . ')\b(?!\\\))~s',
		function (match)
		{
			return isset(match[1]) ? '$' : ''
		}
		, file)
	}
	
	//	replace aliases
	public function replaceAliases (ref file)
	{
		file = preg_replace(
		[
			'~\bref\b(?:\s+|(?=\())~',		//	2
			'~\brefs\s+~',		//	3
			'~\bvals\s+~',		//	4
			'~\b\s*=\s*\{\}~',	//	5
			'~\bdserver\b|\bthe\.server\b~',	//	6
			'~\bdget\b|\bthe\.get\b~',			//	7
			'~\bdpost\b|\bthe\.post\b~',		//	8
			'~\bdrequest\b|\bthe\.request\b~',	//	9
			'~\bdcookie\b|\bthe\.cookie\b~',	//	10
			'~\bdfiles\b|\bthe\.files\b~',		//	11
			'~\bdenv\b|\bthe\.env\b~',			//	12
			'~\bdsession\b|\bthe\.session\b~',	//	13
			'~\bdglobals\b|\bthe\.globals\b~',	//	14
			'~\bdhttpresponseheader\b|\bthe\.httpResponseHeader\b~',	//	15
			'~\bdargc\b|\bthe\.argc\b~',		//	16
			'~\bdargv\b|\bthe\.argv\b~',		//	17
			'~\bdline\b|\bthe\.line\b~',		//	18
			'~\bdfile\b|\bthe\.file\b~',		//	19
			'~\bddir\b|\bthe\.dir\b~',			//	20
			'~\bdfunction\b|\bthe\.function\b~',	//	21
			'~\bdclass\b|\bthe\.class\b~',		//	22
			'~\bdtrait\b|\bthe\.trait\b~',		//	23
			'~\bdmethod\b|\bthe\.method\b~',	//	24
			'~\bdnamespace\b|\bthe\.namespace\b~',	//	25
		],
		[
			'&',				//	2
			'&...',				//	3
			'...',				//	4
			' = new stdClass',	//	5
			'$_SERVER',			//	6
			'$_GET',			//	7
			'$_POST',			//	8
			'$_REQUEST',		//	9
			'$_COOKIE',			//	10
			'$_FILES',			//	11
			'$_ENV',			//	12
			'$_SESSION',		//	13
			'$GLOBALS',		//	14
			'$http_response_header',		//	15
			'$argc',			//	16
			'$argv',			//	17
			'__LINE__',			//	18
			'__FILE__',			//	19
			'__DIR__',			//	20
			'__FUNCTION__',		//	21
			'__CLASS__',		//	22
			'__TRAIT__',		//	23
			'__METHOD__',		//	24
			'__NAMESPACE__',	//	25
		]
		, file)
	}
	
	//	process assignment part
	public function processAssignmentPart (ref file)
	{
		if (!isset(this.assignmentPartSelector))
		{
			this.assignmentPartSelector = str_replace(['\s*', '\c*'], [this.commentEscape, this.codeEscape2],
			'~((?:\b(?:' . this.aliasSelector . ')\b[ \t]+|\bconst\b|\bdeclare\b\s*\(\s*)?)(\s*)((?<!->|\.|::)\$?)(\c*\b\w+\b)([ \t]*(\[(?:(?>[^\[\]]+)|(?-1))*\])?)(\s*(?:[-%|+/&.^]|\*\*?|>>|<<|\?\?)?[=])(?![=>])~')
			//                  1                                               2          3               4       5                6                              7              
		}
		file = preg_replace_callback(this.assignmentPartSelector,
		function (match)
		{
			if (match[1]) return match[0]
			match[3] = '$'
			this.variable[] = match[4]
			match[6] = ''
			match[0] = ''
			return implode(match)
		}
		, file)
	}
	
	//	replace pairing notation
	public function replacePairingNotation (ref file)
	{
		if (!isset(this.pairingNotationSelector))
		{
			//	key : value
			this.pairingNotationSelector = str_replace('\s*', this.commentEscape,
			'~(?:\byield\b|[(\[,])\s*[-]?\s*[\'"]?\$?\w+[\'"]?(?:(?:\.|::|->)\$?\w+)*\s*(?:\[[^\]]*\]\s*|\([^)]*\)\s*)*\s*\K:(?![:?])(?=\s*\S)~')
		}
		
		//	pairing:	key : value
		file = preg_replace(this.pairingNotationSelector, '=>', file)
	}
	
	//	process foreach as part
	public function processForeachAsPart (ref file)
	{
		if (!isset(this.foreachAsSelector))
		{
			this.foreachAsSelector = str_replace('\s*', this.commentEscape,
			'~\bas\b\s*\K((?:\bref\b|&)?)(\s*)(\$?)(\b\w+\b)(\s*)((?:=>|:)?)(\s*)((?:\bref\b|&)?)(\s*)(\$?)((?:\b\w+\b)?)(\s*\))~')
			//					1		   2	3		4	  5		6		  7			8		   9	10		11		   12		
		}
		
		file = preg_replace_callback(this.foreachAsSelector,
		function (match)
		{
			if (match[1]) match[1] = '&'
			if (match[8]) match[8] = '&'
			
			match[3] = '$'
			this.variable[] = match[4]
			if (match[6]) match[6] = '=>'
			if (match[11])
			{
				this.variable[] = match[11]
				match[10] = '$'
			}
			match[0] = ''
			return implode(match)
		}
		, file)
	}
	
	//	process list part
	public function processListPart (ref file)
	{
		if (!isset(this.listSelector))
		{
			this.listSelector = str_replace('\s*', this.commentEscape,
			'~\blist\b\s*\K(\((?:(?>[^()]+)|(?-1))*\))|\bas\b\s*\K(\[(?:(?>[^\[\]]+)|(?-1))*\])|(\[(?:(?>[^\[\]]+)|(?-1))*\])(?=\s*=)~')
			//							1			  |							1			   |				1						
			
			this.variableOnListSelector = str_replace('\s*', this.commentEscape,
			'~([\[(,>]\s*&?\s*)((?:\bref\b\s*)?)(\$?)((?!\blist\b|\d+)\b\w+\b)(?=\s*[\[\],)])~')
			//			1				2		  3					4							
		}
		
		file = preg_replace_callback(this.listSelector,
		function (match)
		{
			match[0] = str_replace(':', '=>', match[0])
			return preg_replace_callback(this.variableOnListSelector,
			function (found)
			{
				if (found[2]) found[2] = '&'
				
				found[3] = '$'
				this.variable[] = found[4]
				
				found[0] = ''
				return implode(found)
			}
			, match[0])
		}
		, file)
	}
	
	//	process variable intro
	public function processVariableIntro (ref file)
	{
		if (!isset(this.variableIntroSelector))
		{
			this.variableIntroSelector = str_replace(['\s*', '\c*'], [this.commentEscape, this.codeEscape2],
			//	global
			'~(?|()(\bglobal\b[ \t]+)()()()(\$?\b\w+\b(?:\s*,\s*\b\w+\b)*)((?:\s*;)?)'
			//	 1		2			 3 4 5		6								 7	
			//			keyword					$name		, tail				 ;	
			
			//	properties, variable declaration
			. '|()(\b(?:var|public|private|protected|static)\b[ \t]+(?:\b(?:public|private|protected|static)\b[ \t]+)?)(\??[ \t]*)((?:[\\\\]?\c*\b[\w\\\\]+\b)?)([ \t]*)(\$?\b\c*\w+\b(?:\s*[=,]\s*[^,;]*)*)((?:\s*;)?)'
			//	1		2																									3						4				5		6									   7	
			//			keyword																								?						type					$name			, tail				   ;	
			
			//	bare properties
			. '|((?:(?:\S\s*)?[\r\n]+|[\r\n{};])[ \t]*)()(\??[ \t]*)([\\\\]?\c*\b[\w\\\\]+\b)([ \t]+)(\$?\b\c*\w+\b(?:\s*[=,]\s*[^,;]*)*)((?:\s*;)?))~')
			//			1								2	3						4			5			6									7		
			//			check								?						type					$name			, tail				;		
			
			this.lastCommandEscapeSelector = '~('. this.commentEscape . ')$~'
			this.variableIntroItemSelector = str_replace(['\s*', '\c*'], [this.commentEscape, this.codeEscape2],
			'~(^|\s*,\s*)(\$?)(\b\c*\w+\b)((?:\s*=\s*(?:[^,\[({;]+|(\[(?:(?>[^\[\]]+)|(?-1))*\])|(\((?:(?>[^()]+)|(?-1))*\))|(\{(?:(?>[^{}]+)|(?-1))*\}))+)?)~')
			//		1		2		3			4							5								6							7						
			//		,		$		name		tail																											
		}
		
		file = preg_replace_callback(this.variableIntroSelector,
		function (match)
		{
			if (preg_match('~^[,\[(]~', match[1])) return match[0]
			
			var directIntro = substr(match[2], 0, 3) == 'var' && match[4] === ''
			if (directIntro) match[2] = ltrim(substr(match[2], 3))
			
			match[4] = this.isolatePart(match[4])
			
			//	put ; sign
			match[6] = preg_replace(this.lastCommandEscapeSelector, ';$1', match[6])
			
			//	$name + tail
			match[6] = preg_replace_callback(this.variableIntroItemSelector,
			function (found) use (directIntro)
			{
				this.variable[] = found[3]
				found[5] = ''
				found[6] = ''
				found[7] = ''
				
				if (directIntro && found[4] === '')
				{
					found[1] = rtrim(rtrim(found[1]), ',')
					found[2] = ''
					found[3] = ''
				}
				else found[2] = '$'
				
				found[0] = ''
				return implode(found)
			}
			, match[6])
			
			match[7] = str_replace(';', '', match[7])
			match[0] = ''
			return implode(match)
		}
		, file)
	}
	
	//	remove digit space
	public function removeDigitSpace (ref file)
	{
		if (!isset(this.digitSpaceSelector))
		{
			this.digitSpaceSelector = '~\d\K (?=\d)|0x[a-f\d]\K[a-f \d]+(?=[a-f\d])~i'
		}
		
		file = preg_replace_callback(this.digitSpaceSelector,
		function (match)
		{
			return str_replace(' ', '', match[0])
		}
		, file)
	}
	
	//	process function and fn part
	public function processFunctionAndFnPart (ref file)
	{
		if (!isset(this.functionAndFnSelector))
		{
			this.functionAndFnSelector = str_replace(['\s*', '\c*'], [this.commentEscape, this.codeEscape2],
			'~(?>(\bf(?:unctio)?n\b)(\s*)((?:\bref\b|&)?)(\s*)((?:\c*\b(?>\w+)\b)?)(\s*)(\((?:(?>[^()]+)|\)\s*\buse\b\s*\(|(?-1))*\))([ \t]*)(:?)([ \t]*)(\??)([ \t]*)((?:\c*(?>[\w\\\\]+))?)(\s*)([{;:=]?))~')
			//			1			  2			3			4			5			6							7						8	  9		10		11	12				13			  14	15			
			//			fn						&						name								argument						  :				?					type				tail		
			
			this.argumentSelector = str_replace(['\s*', '\c*', '\q*'], [this.commentEscape, this.codeEscape, this.codeEscape2],
			'~(?>([\(,]\s*\??\s*)((?>\c*[\w\\\\]+)?)(\s*&?\s*)((?:\bvals\b|\brefs?\b)?)(\s*[.]*\s*)(\$?)(\q*\b\w+\b)((?:\s*=\s*(?:[^,\[({)]+|(\[(?:(?>[^\[\]]+)|(?-1))*\])|(\((?:(?>[^()]+)|(?-1))*\))|(\{(?:(?>[^{}]+)|(?-1))*\}))+)?))~')
			//			1					2			3				4					5		 6			7			8							9							10								11						
			//			(, ?				type		&				ref					...		 $			name		tail																											
		}
		
		file = preg_replace_callback(this.functionAndFnSelector,
		function (match)
		{
			//	arguments
			match[7] = preg_replace_callback(this.argumentSelector,
			function (found)
			{
				//	variable type
				found[2] = this.isolatePart(found[2])
				
				//	reference
				if (found[4])
				{
					found[4] = preg_replace(
					['~\bvals\b[ \t]*~', '~\brefs\b[ \t]*~', '~\bref\b[ \t]*~'],
					['...', '&...', '&'], found[4])
				}
				
				this.variable[] = found[7]
				found[6] = '$'
				found[9] = ''
				found[10] = ''
				found[11] = ''
				found[0] = ''
				return implode(found)
			}
			, match[7])
			
			//	function / fn name
			match[5] = this.isolateText(match[5])
			
			//	return reference
			if (match[3]) match[3] = '&'
			
			var isolateReturnType = false
			
			if (match[1] == 'fn')
			{
				if (match[13])	//	return type
				{
					if (match[15] == ':')	//	tail
					{
						isolateReturnType = true
						match[15] = '=>'
						match[9] = ':'
					}
					else if (match[15] == '=')
					{
						isolateReturnType = true
					}
					else if (match[9]) match[9] = '=>'
				}
				else if (match[9]) match[9] = '=>'
			}
			else	//	function
			{
				if (match[15] == '')
				{
					if (match[13] == '')
					{
						match[9] = ''
						match[11] = ''
						match[8] = ';' . match[8]
					}
					else match[14] = ';' . match[14]
				}
				if (match[13])
				{
					match[9] = ':'
					isolateReturnType = true
				}
			}
			if (isolateReturnType) match[13] = this.isolatePart(match[13])
			
			match[0] = ''
			return implode(match)
		}
		, file)
	}
	
	//	process use part
	public function processUsePart (ref file)
	{
		if (!isset(this.usePartSelector))
		{
			this.usePartSelector = str_replace('\s*', this.commentEscape,
			'~(?|\s\K(\bclass\b)(\s\s*)([^{]+)(\{(?:(?>[^{}]+)|(?-1))*\})|\s\K(\buse\b)(\s*)((?:\s*,?\s*(?!\()[\w\\\\]+)+)(\s*)((?:\{[^}]+\})?)(\s*)(;?))~')
			//				1		2	3				4				 |		1		 2					3				4		5			6	 7		
			//			class			name			body			 |		use							name					item			 ;		
			
			this.useInClassSelector = str_replace('\s*', this.commentEscape,
			'~(?>\s\buse\b\s*)\K((?>\s*,?\s*(?!\()\b\w+\b)+)(\s*)(;?)((?>\{[^}]+\})?)~')
			//									1			  2   3			4			
			//								  name				  ;			item		
			
			this.useTraitItemSelector = str_replace('\s*', this.commentEscape,
			'~(?>\{?\s*)\K((?>\b[\w:.]+\b))(\s\s*)((?>\b\w+\b\s*,?\s*)+)(;?)~')
			//					1			2				3			 4		
			//				  name						  name			 ;		
		}
		
		//	use inside class and use for namespace
		file = preg_replace_callback(this.usePartSelector,
		function (match)
		{
			if (match[0][0] == 'c')	//	class
			{
				//	use in class for trait related
				match[4] = preg_replace_callback(this.useInClassSelector,
				function (found)
				{
					found[1] = this.generateAlias(found[1])
					found[3] = ''
					
					if (found[4] == '') found[2] = ';' . found[2]
					else
					{
						//	trait item part
						found[4] = preg_replace_callback(this.useTraitItemSelector,
						function (got)
						{
							got[3] = str_replace('.', '::', got[1]) . got[2] . got[3]
							got[2] = ''
							got[1] = ''
							got[4] = ';'
							got[3] = this.generateAlias(got[3])
							got[0] = ''
							return implode(got)
						}
						, found[4])
					}
					found[0] = ''
					return implode(found)
				}
				, match[4])
			}
			else	//	use, namespace related
			{
				if (match[5]) match[6] = ';' . match[6]
				else
				{
					match[6] = ';' . match[4] . match[6]
					match[4] = ''
				}
				
				match[7] = ''
				match[3] = match[3] . match[4] . match[5]
				match[4] = ''
				match[5] = ''
				match[3] = this.generateAlias(match[3])
			}
			
			match[0] = ''
			return implode(match)
		}
		, file)
	}
	
	//	process catch part
	public function processCatchPart (ref file)
	{
		if (!isset(this.catchSelector))
		{
			this.catchSelector = str_replace('\s*', this.commentEscape,
			'~\bcatch\b\s*\(\K([^)]+?)(\s)(\$?)(\b\w+\b)(?=\s*\))~')
			//					1		2	3		4				
			//					type		$		name			
		}
		
		file = preg_replace_callback(this.catchSelector,
		function (match)
		{
			this.variable[] = match[4]
			match[3] = '$'
			match[1] = this.generateAlias(match[1])
			match[0] = ''
			return implode(match)
		}
		, file)
	}
	
	//	isolate namespace
	public function isolateNamespace (ref file)
	{
		if (!isset(this.namespaceSelector))
		{
			//	namespace
			this.namespaceSelector = str_replace('\s*', this.commentEscape,
			'~\bnamespace\b\s\s*[^;{]+|[^\\\\]\K\bnamespace\b\\\\[^\[(;\s#/]+~')
		}
		
		file = preg_replace_callback(this.namespaceSelector,
		function (match)
		{
			match[0] = str_replace('.', '::', match[0])
			return this.generateAlias(match[0])
		}
		, file)
	}
	
	//	isolate parts
	public function isolateParts (ref file)
	{
		file = preg_replace_callback(
		'~(?|(\s\b(?:class|interface|trait)\b\s)([^{]+)(\{)|()(()<<<[\'"]?(\b\w+\b)[\'"]?[\s\S]+?[\r\n][ \t]*\b\g{-1}\b)|(^|\?>)((?>[^<]+|<(?!\?))*)((?:<\?)?)|(#|//)([^\r\n]*)()|(/\*)((?>[^*]+|\*(?!/))*)(\*/)|(`)([^`]*)(`)|(\')((?>[^\'\\\\]+|\\\[\s\S])*)(\')|(")((?>[^"\\\\]+|\\\[\s\S])*)("))~',
		//			1								2	 3 |1 2 3				4										|	1				2			3	  |  1		2	   3 |  1				2		3	| 1		2	3 | 1	2							3 | 1	2						 3		
		function (match)
		{
			if (match[1] == '#' || match[1] == '//' || match[1] == '/*')
			{
				return this.generateAlias(match[0], true)
			}
			return (match[2] === '') ? match[0] : (match[1] . this.generateAlias(match[2]) . match[3])
		}
		, file)
	}
}

var varrefvals = new Varrefvals
varrefvals.execute(the.argv[1], isset(the.argv[2]) ? the.argv[2] : '')
